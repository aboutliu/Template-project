std::vector<std::vector<int>> e, V, E;
std::vector<int> a, w;
int p;

struct EBCC {
    int n, DFN = 0, Bridge_count = 0;
    std::vector<int> dfn, low, f, vis, sta, id, d;
    EBCC(int _) {
        init(_);
    }

    void init(int _) {
        n = _;
        id.resize(n + 1);
        dfn.resize(n + 1);
        low.resize(n + 1);
        f.resize(n + 1);
        vis.resize(n + 1);
        sta.clear();
    }

    void tarjan(int u, int F) {
        sta.emplace_back(u);
        f[u] = F;
        dfn[u] = low[u] = ++DFN;
        int fa = 0;
        for (auto v : e[u]) {
            if (!dfn[v]) {
                tarjan(v, u);
                low[u] = std::min(low[u], low[v]);
                if (low[v] > dfn[u]) {
                    ++Bridge_count;
                    vis[v] = 1;
                }
            } else if (v != F) {
                low[u] = std::min(low[u], dfn[v]);
            } else if (++fa > 1) {
                low[u] = std::min(low[u], dfn[v]);
            }
        }
        if (dfn[u] == low[u]) {
            std::vector<int> t;
            int y;
            ++p;
            do {
                y = sta.back();
                sta.pop_back();
                id[y] = p;
                // t.emplace_back(y);
            } while (y != u);
            // V.emplace_back(t);
        }
    }

    void Graph() {
        E.resize(p + 1);
        w.resize(p + 1);
        d.resize(p + 1);
        for (int i = 1; i <= n; ++i) {
            for (auto v : e[i]) {
                if (id[v] != id[i]) {
                    E[id[i]].emplace_back(id[v]);
                    ++d[id[i]];
                }
            }
            w[id[i]] += 1;
        }
    }
};