template <class T>
struct SparseTable {
    const int n, N;
    std::vector<std::vector<T>> f;
    SparseTable(u32 _) : n(_), N(std::bit_width(_)), f(n + 1, std::vector<T>(std::bit_width(_), T())) {}
    SparseTable(std::vector<int> a) : SparseTable(a.size()) {
        for (int i = 1; i <= n; ++i) {
            f[i][0].apply(a[i - 1]);
        }
        for (int j = 1; j < N; ++j) {
            for (int i = 1; i + (1 << j) - 1 <= n; ++i) {
                f[i][j] = f[i][j - 1] + f[i + (1 << j - 1)][j - 1];
            }
        }
    }
    T rangeInfo(int l, int r) {
        if (l > r) {
            std::swap(l, r);
        }
        int s = std::log2(r - l + 1);
        return f[l][s] + f[r - (1 << s) + 1][s];
    }
};

struct Info {
    int max, min;
    void apply(int v) {
        max = min = v;
    }
};

Info operator + (const Info &u, const Info &v) {
    Info res = {};
    res.max = std::max(u.max, v.max);
    res.min = std::min(u.min, v.min);
    return res;
}