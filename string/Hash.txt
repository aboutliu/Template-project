template<typename T>
constexpr T power(T a, u64 b) {
    T res {1};
    for (; b != 0; b /= 2, a *= a) {
        if (b % 2 == 1) {
            res *= a;
        }
    }
    return res;
}

template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return 1ULL * a * b % P;
}

template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}

template<typename U, U P>
requires std::unsigned_integral<U>
struct ModIntBase {
public:
    constexpr ModIntBase() : x {0} {}
    
    template<typename T>
    requires std::integral<T>
    constexpr ModIntBase(T x_) : x {norm(x_ % T {P})} {}
    
    constexpr static U norm(U x) {
        if ((x >> (8 * sizeof(U) - 1) & 1) == 1) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
    
    constexpr U val() const {
        return x;
    }
    
    constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = norm(P - x);
        return res;
    }
    
    constexpr ModIntBase inv() const {
        return power(*this, P - 2);
    }
    
    constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<P>(x, rhs.val());
        return *this;
    }
    
    constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
    
    constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
    
    constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
    
    friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
    
    friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
    
    friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
    
    friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
    
    friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
    
    friend constexpr bool operator==(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() == rhs.val();
    }
    
    friend constexpr bool operator!=(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() != rhs.val();
    }
    
    friend constexpr bool operator<(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() < rhs.val();
    }
    
private:
    U x;
};

template<u32 P>
using ModInt = ModIntBase<u32, P>;

template<u64 P>
using ModInt64 = ModIntBase<u64, P>;

constexpr u64 P = u64(1E18) + 9;
constexpr u64 Base = 1145141;
using Z = ModInt64<P>;

template <class T>
struct Hash1 {
    const int N;
    std::vector<T> p, S;
    Hash1(int _) : N(_), p(_ + 1), S(_ + 1) {}
    Hash1(std::string s) : Hash1(int(s.size())) {
        p[0] = 1ULL;
        for (int i = 1; i <= N; ++i) {
            p[i] = p[i - 1] * Base;
        }
        for (int i = 1; i <= N; ++i) {
            S[i] = S[i - 1] * Base + 1ULL * s[i - 1];
        }
    }
 
    T get_sub(int l, int r) {
        return S[r] - S[l - 1] * p[r - l + 1];
    }
};

constexpr int mod1 = 998244353, mod2 = 1E9 + 7;

struct Hash2 {
    const int N, P1 = 13331, P2 = 1145141;
    std::vector<int> p1, p2, S1, S2;
    Hash2(int _) : N(_), p1(_ + 1), p2(_ + 1), S1(_ + 1), S2(_ + 1) {}
    Hash2(std::string s) : Hash2(int(s.size())) {
        p1[0] = p2[0] = 1;
        for (int i = 1; i <= N; ++i) {
            p1[i] = 1LL * p1[i - 1] * P1 % mod1;
            p2[i] = 1LL * p2[i - 1] * P2 % mod2;
        }
        for (int i = 1; i <= N; ++i) {
            S1[i] = (1LL * S1[i - 1] * P1 % mod1 + s[i - 1]) % mod1;
            S2[i] = (1LL * S2[i - 1] * P2 % mod2 + s[i - 1]) % mod2;
        }
    }

    std::pair<int, int> get_sub(int l, int r) {
        return {(S1[r] - 1LL * S1[l - 1] * p1[r - l + 1] % mod1 + mod1) % mod1, 
            (S2[r] - 1LL * S2[l - 1] * p2[r - l + 1] % mod2 + mod2) % mod2
        };
    }
};